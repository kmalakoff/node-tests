#!/usr/bin/env node

// var path = require('path');
// var Iterator = require('fs-iterator');
// var minimatch = require('minimatch');
// var some = require('lodash.some');
var mock = require('mock-require');
require('expose-gc');

global.internalBinding = function (name) {
  if (name === 'types') return require('./internal/util/types');
  // eslint-disable-next-line node/no-deprecated-api
  return process.binding(name);
};
global.primordials = {};
global.primordials.SymbolFor = Symbol.for;
global.primordials.ObjectGetPrototypeOf = Object.getPrototypeOf;
require('./internal/per_context/primordials');
process.env.NODE_TEST_KNOWN_GLOBALS = '0'; // don't error on these globals existing

mock('internal/assert', require('./internal/assert'));
mock('internal/errors', require('./internal/errors'));
mock('internal/test/binding', {});
// mock('internal/test/binding', require('./internal/test/binding'));
mock('internal/util/types', require('./internal/util/types'));
mock('internal/util', require('./internal/util'));
// mock('internal/bootstrap/loaders', require('./internal/bootstrap/loaders'));
mock('internal/bootstrap/loaders', {});
mock('internal/util/inspect', require('./internal/util/inspect'));
mock('internal/querystring', require('./internal/querystring'));
mock('internal/constants', require('./internal/constants'));
mock('internal/url', require('./internal/url'));
mock('internal/validators', require('./internal/validators'));
mock('internal/fs/utils', require('./internal/fs/utils'));
mock('fs', require('..'));

// var TESTS_DIR = path.join(__dirname, '..', 'test', 'dist');
// var EXCLUDE_FILES = ['common/*', 'fixtures/*', 'pummel/*'];
// var KEEP_FILES = ['common/*.js', 'parallel/**/*-fs-*.js', 'pummel/**/*-fs-*.js', 'sequential/**/*-fs-*.js'];

// var errors = [];
// var iterator = new Iterator(TESTS_DIR);
// iterator.forEach(
//   function (entry, callback) {
//     if (!entry.stats.isFile()) return callback();
//     if (some(EXCLUDE_FILES, minimatch.bind(null, entry.path))) return callback();
//     if (!some(KEEP_FILES, minimatch.bind(null, entry.path))) return callback();

try {
  require('/Users/kevin/Dev/OpenSource/fs-compat/test/dist/parallel/test-fs-readdir.js');
} catch (err) {
  // console.log(entry.path);
  // console.log(err);
  // errors.push(err);
}
//     setTimeout(callback, 100);
//   },
//   {
//     callbacks: true,
//     concurrency: 1,
//   },
//   function (err) {
//     if (err) return console.log(err.message);
//     if (errors.length) console.log('Done with ' + errors.length + ' errors');
//   }
// );
